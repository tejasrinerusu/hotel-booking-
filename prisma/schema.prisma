generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Hotel {
  id                  String    @id @default(uuid())
  userId              String
  title               String
  description         String
  image               String
  country             String
  state               String
  city                String
  locationDescription String
  gym                 Boolean   @default(false)
  spa                 Boolean   @default(false)
  bar                 Boolean   @default(false)
  laundry             Boolean   @default(false)
  restaurant          Boolean   @default(false)
  shopping            Boolean   @default(false)
  freeParking         Boolean   @default(false)
  bikeRental          Boolean   @default(false)
  freewifi            Boolean   @default(false)
  movieNights         Boolean   @default(false)
  swimmingPool        Boolean   @default(false)
  coffeeShop          Boolean   @default(false)
  addedAt             DateTime  @default(now())
  updatedAt           DateTime  @default(now())
  bookings            Booking[]
  rooms               Room[]
}

model Room {
  id             String    @id @default(uuid())
  title          String
  description    String
  bedCount       Int       @default(0)
  guestCount     Int       @default(0)
  bathroomCount  Int       @default(0)
  kingBed        Int       @default(0)
  queenBed       Int       @default(0)
  image          String
  breakFastPrice Int
  roomPrice      Int
  roomService    Boolean   @default(false)
  TV             Boolean   @default(false)
  balcony        Boolean   @default(false)
  freeWifi       Boolean   @default(false)
  cityView       Boolean   @default(false)
  oceanView      Boolean   @default(false)
  forestView     Boolean   @default(false)
  mountainView   Boolean   @default(false)
  airCondition   Boolean   @default(false)
  soundProofed   Boolean   @default(false)
  hotelId        String
  Booking        Booking[]
  Hotel          Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
}

model Booking {
  id                String   @id @default(uuid())
  userName          String
  userEmail         String
  userId            String
  roomId            String
  hotelId           String
  hotelOwnerId      String
  startDate         DateTime
  endDate           DateTime
  breakFastIncluded Boolean
  currency          String
  totalPrice        Int
  paymentStatus     Boolean  @default(false)
  PaymentIntentId   String   @unique
  bookedAt          DateTime @default(now())
  Hotel             Hotel    @relation(fields: [hotelId], references: [id])
  Room              Room     @relation(fields: [roomId], references: [id])

  @@index([hotelId])
  @@index([roomId])
}
